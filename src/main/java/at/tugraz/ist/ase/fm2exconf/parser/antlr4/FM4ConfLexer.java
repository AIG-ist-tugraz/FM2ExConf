/*
 * Feature Model to Excel-based Configurator Support Tool
 *
 * Copyright (c) 2020-2023 AIG team, Institute for Software Technology, Graz University of Technology, Austria
 *
 * Contact: http://ase.ist.tugraz.at/ASE/
 */

package at.tugraz.ist.ase.fm2exconf.parser.antlr4;


import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.ATN;
import org.antlr.v4.runtime.atn.ATNDeserializer;
import org.antlr.v4.runtime.atn.LexerATNSimulator;
import org.antlr.v4.runtime.atn.PredictionContextCache;
import org.antlr.v4.runtime.dfa.DFA;

/**
 * Generated by ANTLR4 library
 */
@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class FM4ConfLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.8", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		FM4CONFversion=1, MODELNAME=2, FEATURE=3, RELATIONSHIP=4, CONSTRAINT=5, 
		MANDATORY=6, OPTIONAL=7, ALTERNATIVE=8, OR=9, REQUIRES=10, EXCLUDES=11, 
		CM=12, SC=13, CL=14, LP=15, RP=16, NAME=17, COMMENT=18, WS=19;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"FM4CONFversion", "MODELNAME", "FEATURE", "RELATIONSHIP", "CONSTRAINT", 
			"MANDATORY", "OPTIONAL", "ALTERNATIVE", "OR", "REQUIRES", "EXCLUDES", 
			"CM", "SC", "CL", "LP", "RP", "NAME", "COMMENT", "WS", "ID", "ID_HEAD", 
			"ID_TAIL", "LETTER", "DIGIT", "SPACE"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'FM4Conf-v1.0'", "'MODEL'", "'FEATURES'", "'RELATIONSHIPS'", "'CONSTRAINTS'", 
			"'mandatory'", "'optional'", "'alternative'", "'or'", "'requires'", "'excludes'", 
			"','", "';'", "':'", "'('", "')'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "FM4CONFversion", "MODELNAME", "FEATURE", "RELATIONSHIP", "CONSTRAINT", 
			"MANDATORY", "OPTIONAL", "ALTERNATIVE", "OR", "REQUIRES", "EXCLUDES", 
			"CM", "SC", "CL", "LP", "RP", "NAME", "COMMENT", "WS"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public FM4ConfLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "FM4Conf.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\25\u00d7\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5"+
		"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\b\3\b"+
		"\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3"+
		"\t\3\t\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3"+
		"\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3"+
		"\21\3\21\3\22\3\22\3\22\3\22\7\22\u00ae\n\22\f\22\16\22\u00b1\13\22\3"+
		"\23\3\23\7\23\u00b5\n\23\f\23\16\23\u00b8\13\23\3\23\3\23\3\23\3\23\3"+
		"\24\3\24\3\24\3\24\3\25\3\25\7\25\u00c4\n\25\f\25\16\25\u00c7\13\25\3"+
		"\26\3\26\3\27\3\27\5\27\u00cd\n\27\3\30\3\30\3\31\3\31\3\32\6\32\u00d4"+
		"\n\32\r\32\16\32\u00d5\2\2\33\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13"+
		"\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\2+\2-\2/\2\61\2\63"+
		"\2\3\2\6\4\2\f\f\17\17\5\2\13\f\17\17\"\"\6\2//C\\aac|\3\2\62;\2\u00d5"+
		"\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2"+
		"\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2"+
		"\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2"+
		"\2\2\2%\3\2\2\2\2\'\3\2\2\2\3\65\3\2\2\2\5B\3\2\2\2\7H\3\2\2\2\tQ\3\2"+
		"\2\2\13_\3\2\2\2\rk\3\2\2\2\17u\3\2\2\2\21~\3\2\2\2\23\u008a\3\2\2\2\25"+
		"\u008d\3\2\2\2\27\u0096\3\2\2\2\31\u009f\3\2\2\2\33\u00a1\3\2\2\2\35\u00a3"+
		"\3\2\2\2\37\u00a5\3\2\2\2!\u00a7\3\2\2\2#\u00a9\3\2\2\2%\u00b2\3\2\2\2"+
		"\'\u00bd\3\2\2\2)\u00c1\3\2\2\2+\u00c8\3\2\2\2-\u00cc\3\2\2\2/\u00ce\3"+
		"\2\2\2\61\u00d0\3\2\2\2\63\u00d3\3\2\2\2\65\66\7H\2\2\66\67\7O\2\2\67"+
		"8\7\66\2\289\7E\2\29:\7q\2\2:;\7p\2\2;<\7h\2\2<=\7/\2\2=>\7x\2\2>?\7\63"+
		"\2\2?@\7\60\2\2@A\7\62\2\2A\4\3\2\2\2BC\7O\2\2CD\7Q\2\2DE\7F\2\2EF\7G"+
		"\2\2FG\7N\2\2G\6\3\2\2\2HI\7H\2\2IJ\7G\2\2JK\7C\2\2KL\7V\2\2LM\7W\2\2"+
		"MN\7T\2\2NO\7G\2\2OP\7U\2\2P\b\3\2\2\2QR\7T\2\2RS\7G\2\2ST\7N\2\2TU\7"+
		"C\2\2UV\7V\2\2VW\7K\2\2WX\7Q\2\2XY\7P\2\2YZ\7U\2\2Z[\7J\2\2[\\\7K\2\2"+
		"\\]\7R\2\2]^\7U\2\2^\n\3\2\2\2_`\7E\2\2`a\7Q\2\2ab\7P\2\2bc\7U\2\2cd\7"+
		"V\2\2de\7T\2\2ef\7C\2\2fg\7K\2\2gh\7P\2\2hi\7V\2\2ij\7U\2\2j\f\3\2\2\2"+
		"kl\7o\2\2lm\7c\2\2mn\7p\2\2no\7f\2\2op\7c\2\2pq\7v\2\2qr\7q\2\2rs\7t\2"+
		"\2st\7{\2\2t\16\3\2\2\2uv\7q\2\2vw\7r\2\2wx\7v\2\2xy\7k\2\2yz\7q\2\2z"+
		"{\7p\2\2{|\7c\2\2|}\7n\2\2}\20\3\2\2\2~\177\7c\2\2\177\u0080\7n\2\2\u0080"+
		"\u0081\7v\2\2\u0081\u0082\7g\2\2\u0082\u0083\7t\2\2\u0083\u0084\7p\2\2"+
		"\u0084\u0085\7c\2\2\u0085\u0086\7v\2\2\u0086\u0087\7k\2\2\u0087\u0088"+
		"\7x\2\2\u0088\u0089\7g\2\2\u0089\22\3\2\2\2\u008a\u008b\7q\2\2\u008b\u008c"+
		"\7t\2\2\u008c\24\3\2\2\2\u008d\u008e\7t\2\2\u008e\u008f\7g\2\2\u008f\u0090"+
		"\7s\2\2\u0090\u0091\7w\2\2\u0091\u0092\7k\2\2\u0092\u0093\7t\2\2\u0093"+
		"\u0094\7g\2\2\u0094\u0095\7u\2\2\u0095\26\3\2\2\2\u0096\u0097\7g\2\2\u0097"+
		"\u0098\7z\2\2\u0098\u0099\7e\2\2\u0099\u009a\7n\2\2\u009a\u009b\7w\2\2"+
		"\u009b\u009c\7f\2\2\u009c\u009d\7g\2\2\u009d\u009e\7u\2\2\u009e\30\3\2"+
		"\2\2\u009f\u00a0\7.\2\2\u00a0\32\3\2\2\2\u00a1\u00a2\7=\2\2\u00a2\34\3"+
		"\2\2\2\u00a3\u00a4\7<\2\2\u00a4\36\3\2\2\2\u00a5\u00a6\7*\2\2\u00a6 \3"+
		"\2\2\2\u00a7\u00a8\7+\2\2\u00a8\"\3\2\2\2\u00a9\u00af\5)\25\2\u00aa\u00ab"+
		"\5\63\32\2\u00ab\u00ac\5)\25\2\u00ac\u00ae\3\2\2\2\u00ad\u00aa\3\2\2\2"+
		"\u00ae\u00b1\3\2\2\2\u00af\u00ad\3\2\2\2\u00af\u00b0\3\2\2\2\u00b0$\3"+
		"\2\2\2\u00b1\u00af\3\2\2\2\u00b2\u00b6\7\'\2\2\u00b3\u00b5\n\2\2\2\u00b4"+
		"\u00b3\3\2\2\2\u00b5\u00b8\3\2\2\2\u00b6\u00b4\3\2\2\2\u00b6\u00b7\3\2"+
		"\2\2\u00b7\u00b9\3\2\2\2\u00b8\u00b6\3\2\2\2\u00b9\u00ba\7\f\2\2\u00ba"+
		"\u00bb\3\2\2\2\u00bb\u00bc\b\23\2\2\u00bc&\3\2\2\2\u00bd\u00be\t\3\2\2"+
		"\u00be\u00bf\3\2\2\2\u00bf\u00c0\b\24\2\2\u00c0(\3\2\2\2\u00c1\u00c5\5"+
		"+\26\2\u00c2\u00c4\5-\27\2\u00c3\u00c2\3\2\2\2\u00c4\u00c7\3\2\2\2\u00c5"+
		"\u00c3\3\2\2\2\u00c5\u00c6\3\2\2\2\u00c6*\3\2\2\2\u00c7\u00c5\3\2\2\2"+
		"\u00c8\u00c9\5/\30\2\u00c9,\3\2\2\2\u00ca\u00cd\5/\30\2\u00cb\u00cd\5"+
		"\61\31\2\u00cc\u00ca\3\2\2\2\u00cc\u00cb\3\2\2\2\u00cd.\3\2\2\2\u00ce"+
		"\u00cf\t\4\2\2\u00cf\60\3\2\2\2\u00d0\u00d1\t\5\2\2\u00d1\62\3\2\2\2\u00d2"+
		"\u00d4\7\"\2\2\u00d3\u00d2\3\2\2\2\u00d4\u00d5\3\2\2\2\u00d5\u00d3\3\2"+
		"\2\2\u00d5\u00d6\3\2\2\2\u00d6\64\3\2\2\2\b\2\u00af\u00b6\u00c5\u00cc"+
		"\u00d5\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}