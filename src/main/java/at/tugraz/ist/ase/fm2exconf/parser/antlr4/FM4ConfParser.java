/*
 * Feature Model to Excel-based Configurator Support Tool
 *
 * Copyright (c) 2020-2023 AIG team, Institute for Software Technology, Graz University of Technology, Austria
 *
 * Contact: http://ase.ist.tugraz.at/ASE/
 */

package at.tugraz.ist.ase.fm2exconf.parser.antlr4;

import at.tugraz.ist.ase.fm2exconf.core.FeatureModelException;
import at.tugraz.ist.ase.fm2exconf.parser.ParserException;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.ATN;
import org.antlr.v4.runtime.atn.ATNDeserializer;
import org.antlr.v4.runtime.atn.ParserATNSimulator;
import org.antlr.v4.runtime.atn.PredictionContextCache;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.tree.ParseTreeListener;
import org.antlr.v4.runtime.tree.TerminalNode;

import java.util.List;

/**
 * Generated by ANTLR4 library
 */
@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class FM4ConfParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.8", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		FM4CONFversion=1, MODELNAME=2, FEATURE=3, RELATIONSHIP=4, CONSTRAINT=5, 
		MANDATORY=6, OPTIONAL=7, ALTERNATIVE=8, OR=9, REQUIRES=10, EXCLUDES=11, 
		CM=12, SC=13, CL=14, LP=15, RP=16, NAME=17, COMMENT=18, WS=19;
	public static final int
		RULE_model = 0, RULE_fm4confver = 1, RULE_modelname = 2, RULE_feature = 3, 
		RULE_relationship = 4, RULE_constraint = 5, RULE_identifier = 6, RULE_relationshiprule = 7, 
		RULE_constraintrule = 8;
	private static String[] makeRuleNames() {
		return new String[] {
			"model", "fm4confver", "modelname", "feature", "relationship", "constraint", 
			"identifier", "relationshiprule", "constraintrule"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'FM4Conf-v1.0'", "'MODEL'", "'FEATURES'", "'RELATIONSHIPS'", "'CONSTRAINTS'", 
			"'mandatory'", "'optional'", "'alternative'", "'or'", "'requires'", "'excludes'", 
			"','", "';'", "':'", "'('", "')'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "FM4CONFversion", "MODELNAME", "FEATURE", "RELATIONSHIP", "CONSTRAINT", 
			"MANDATORY", "OPTIONAL", "ALTERNATIVE", "OR", "REQUIRES", "EXCLUDES", 
			"CM", "SC", "CL", "LP", "RP", "NAME", "COMMENT", "WS"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "FM4Conf.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public FM4ConfParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class ModelContext extends ParserRuleContext {
		public Fm4confverContext fm4confver() {
			return getRuleContext(Fm4confverContext.class,0);
		}
		public ModelnameContext modelname() {
			return getRuleContext(ModelnameContext.class,0);
		}
		public FeatureContext feature() {
			return getRuleContext(FeatureContext.class,0);
		}
		public RelationshipContext relationship() {
			return getRuleContext(RelationshipContext.class,0);
		}
		public ConstraintContext constraint() {
			return getRuleContext(ConstraintContext.class,0);
		}
		public ModelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof FM4ConfListener ) ((FM4ConfListener)listener).enterModel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof FM4ConfListener ) ((FM4ConfListener)listener).exitModel(this);
		}
	}

	public final ModelContext model() throws RecognitionException {
		ModelContext _localctx = new ModelContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(18);
			fm4confver();
			setState(19);
			modelname();
			setState(21);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FEATURE) {
				{
				setState(20);
				feature();
				}
			}

			setState(24);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RELATIONSHIP) {
				{
				setState(23);
				relationship();
				}
			}

			setState(27);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(26);
				constraint();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fm4confverContext extends ParserRuleContext {
		public TerminalNode FM4CONFversion() { return getToken(FM4ConfParser.FM4CONFversion, 0); }
		public Fm4confverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fm4confver; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof FM4ConfListener ) ((FM4ConfListener)listener).enterFm4confver(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof FM4ConfListener ) ((FM4ConfListener)listener).exitFm4confver(this);
		}
	}

	public final Fm4confverContext fm4confver() throws RecognitionException {
		Fm4confverContext _localctx = new Fm4confverContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_fm4confver);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(29);
			match(FM4CONFversion);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ModelnameContext extends ParserRuleContext {
		public TerminalNode MODELNAME() { return getToken(FM4ConfParser.MODELNAME, 0); }
		public TerminalNode CL() { return getToken(FM4ConfParser.CL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ModelnameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modelname; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof FM4ConfListener ) ((FM4ConfListener)listener).enterModelname(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof FM4ConfListener ) ((FM4ConfListener)listener).exitModelname(this);
		}
	}

	public final ModelnameContext modelname() throws RecognitionException {
		ModelnameContext _localctx = new ModelnameContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_modelname);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(31);
			match(MODELNAME);
			setState(32);
			match(CL);
			setState(33);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FeatureContext extends ParserRuleContext {
		public TerminalNode FEATURE() { return getToken(FM4ConfParser.FEATURE, 0); }
		public TerminalNode CL() { return getToken(FM4ConfParser.CL, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> CM() { return getTokens(FM4ConfParser.CM); }
		public TerminalNode CM(int i) {
			return getToken(FM4ConfParser.CM, i);
		}
		public FeatureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_feature; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof FM4ConfListener ) ((FM4ConfListener)listener).enterFeature(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof FM4ConfListener ) {
				try {
					((FM4ConfListener)listener).exitFeature(this);
				} catch (ParserException | FeatureModelException e) {
					e.printStackTrace();
				}
			}
		}
	}

	public final FeatureContext feature() throws RecognitionException {
		FeatureContext _localctx = new FeatureContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_feature);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(35);
			match(FEATURE);
			setState(36);
			match(CL);
			setState(37);
			identifier();
			setState(42);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CM) {
				{
				{
				setState(38);
				match(CM);
				setState(39);
				identifier();
				}
				}
				setState(44);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RelationshipContext extends ParserRuleContext {
		public TerminalNode RELATIONSHIP() { return getToken(FM4ConfParser.RELATIONSHIP, 0); }
		public TerminalNode CL() { return getToken(FM4ConfParser.CL, 0); }
		public List<RelationshipruleContext> relationshiprule() {
			return getRuleContexts(RelationshipruleContext.class);
		}
		public RelationshipruleContext relationshiprule(int i) {
			return getRuleContext(RelationshipruleContext.class,i);
		}
		public List<TerminalNode> CM() { return getTokens(FM4ConfParser.CM); }
		public TerminalNode CM(int i) {
			return getToken(FM4ConfParser.CM, i);
		}
		public RelationshipContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relationship; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof FM4ConfListener ) ((FM4ConfListener)listener).enterRelationship(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof FM4ConfListener ) ((FM4ConfListener)listener).exitRelationship(this);
		}
	}

	public final RelationshipContext relationship() throws RecognitionException {
		RelationshipContext _localctx = new RelationshipContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_relationship);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(45);
			match(RELATIONSHIP);
			setState(46);
			match(CL);
			setState(47);
			relationshiprule();
			setState(52);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CM) {
				{
				{
				setState(48);
				match(CM);
				setState(49);
				relationshiprule();
				}
				}
				setState(54);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT() { return getToken(FM4ConfParser.CONSTRAINT, 0); }
		public TerminalNode CL() { return getToken(FM4ConfParser.CL, 0); }
		public List<ConstraintruleContext> constraintrule() {
			return getRuleContexts(ConstraintruleContext.class);
		}
		public ConstraintruleContext constraintrule(int i) {
			return getRuleContext(ConstraintruleContext.class,i);
		}
		public List<TerminalNode> CM() { return getTokens(FM4ConfParser.CM); }
		public TerminalNode CM(int i) {
			return getToken(FM4ConfParser.CM, i);
		}
		public ConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof FM4ConfListener ) ((FM4ConfListener)listener).enterConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof FM4ConfListener ) ((FM4ConfListener)listener).exitConstraint(this);
		}
	}

	public final ConstraintContext constraint() throws RecognitionException {
		ConstraintContext _localctx = new ConstraintContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(55);
			match(CONSTRAINT);
			setState(56);
			match(CL);
			setState(57);
			constraintrule();
			setState(62);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CM) {
				{
				{
				setState(58);
				match(CM);
				setState(59);
				constraintrule();
				}
				}
				setState(64);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public TerminalNode NAME() { return getToken(FM4ConfParser.NAME, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof FM4ConfListener ) ((FM4ConfListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof FM4ConfListener ) ((FM4ConfListener)listener).exitIdentifier(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(65);
			match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RelationshipruleContext extends ParserRuleContext {
		public RelationshipruleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relationshiprule; }
	 
		public RelationshipruleContext() { }
		public void copyFrom(RelationshipruleContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class OrContext extends RelationshipruleContext {
		public TerminalNode OR() { return getToken(FM4ConfParser.OR, 0); }
		public TerminalNode LP() { return getToken(FM4ConfParser.LP, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode RP() { return getToken(FM4ConfParser.RP, 0); }
		public List<TerminalNode> CM() { return getTokens(FM4ConfParser.CM); }
		public TerminalNode CM(int i) {
			return getToken(FM4ConfParser.CM, i);
		}
		public OrContext(RelationshipruleContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof FM4ConfListener ) ((FM4ConfListener)listener).enterOr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof FM4ConfListener ) ((FM4ConfListener)listener).exitOr(this);
		}
	}
	public static class AlternativeContext extends RelationshipruleContext {
		public TerminalNode ALTERNATIVE() { return getToken(FM4ConfParser.ALTERNATIVE, 0); }
		public TerminalNode LP() { return getToken(FM4ConfParser.LP, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode RP() { return getToken(FM4ConfParser.RP, 0); }
		public List<TerminalNode> CM() { return getTokens(FM4ConfParser.CM); }
		public TerminalNode CM(int i) {
			return getToken(FM4ConfParser.CM, i);
		}
		public AlternativeContext(RelationshipruleContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof FM4ConfListener ) ((FM4ConfListener)listener).enterAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof FM4ConfListener ) ((FM4ConfListener)listener).exitAlternative(this);
		}
	}
	public static class OptionalContext extends RelationshipruleContext {
		public TerminalNode OPTIONAL() { return getToken(FM4ConfParser.OPTIONAL, 0); }
		public TerminalNode LP() { return getToken(FM4ConfParser.LP, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode CM() { return getToken(FM4ConfParser.CM, 0); }
		public TerminalNode RP() { return getToken(FM4ConfParser.RP, 0); }
		public OptionalContext(RelationshipruleContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof FM4ConfListener ) ((FM4ConfListener)listener).enterOptional(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof FM4ConfListener ) ((FM4ConfListener)listener).exitOptional(this);
		}
	}
	public static class MandatoryContext extends RelationshipruleContext {
		public TerminalNode MANDATORY() { return getToken(FM4ConfParser.MANDATORY, 0); }
		public TerminalNode LP() { return getToken(FM4ConfParser.LP, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode CM() { return getToken(FM4ConfParser.CM, 0); }
		public TerminalNode RP() { return getToken(FM4ConfParser.RP, 0); }
		public MandatoryContext(RelationshipruleContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof FM4ConfListener ) ((FM4ConfListener)listener).enterMandatory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof FM4ConfListener ) ((FM4ConfListener)listener).exitMandatory(this);
		}
	}

	public final RelationshipruleContext relationshiprule() throws RecognitionException {
		RelationshipruleContext _localctx = new RelationshipruleContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_relationshiprule);
		int _la;
		try {
			setState(103);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MANDATORY:
				_localctx = new MandatoryContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(67);
				match(MANDATORY);
				setState(68);
				match(LP);
				setState(69);
				identifier();
				setState(70);
				match(CM);
				setState(71);
				identifier();
				setState(72);
				match(RP);
				}
				break;
			case OPTIONAL:
				_localctx = new OptionalContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(74);
				match(OPTIONAL);
				setState(75);
				match(LP);
				setState(76);
				identifier();
				setState(77);
				match(CM);
				setState(78);
				identifier();
				setState(79);
				match(RP);
				}
				break;
			case ALTERNATIVE:
				_localctx = new AlternativeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(81);
				match(ALTERNATIVE);
				setState(82);
				match(LP);
				setState(83);
				identifier();
				setState(86); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(84);
					match(CM);
					setState(85);
					identifier();
					}
					}
					setState(88); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CM );
				setState(90);
				match(RP);
				}
				break;
			case OR:
				_localctx = new OrContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(92);
				match(OR);
				setState(93);
				match(LP);
				setState(94);
				identifier();
				setState(97); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(95);
					match(CM);
					setState(96);
					identifier();
					}
					}
					setState(99); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CM );
				setState(101);
				match(RP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintruleContext extends ParserRuleContext {
		public ConstraintruleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintrule; }
	 
		public ConstraintruleContext() { }
		public void copyFrom(ConstraintruleContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ExcludesContext extends ConstraintruleContext {
		public TerminalNode EXCLUDES() { return getToken(FM4ConfParser.EXCLUDES, 0); }
		public TerminalNode LP() { return getToken(FM4ConfParser.LP, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode CM() { return getToken(FM4ConfParser.CM, 0); }
		public TerminalNode RP() { return getToken(FM4ConfParser.RP, 0); }
		public ExcludesContext(ConstraintruleContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof FM4ConfListener ) ((FM4ConfListener)listener).enterExcludes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof FM4ConfListener ) ((FM4ConfListener)listener).exitExcludes(this);
		}
	}
	public static class RequiresContext extends ConstraintruleContext {
		public TerminalNode REQUIRES() { return getToken(FM4ConfParser.REQUIRES, 0); }
		public TerminalNode LP() { return getToken(FM4ConfParser.LP, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode CM() { return getToken(FM4ConfParser.CM, 0); }
		public TerminalNode RP() { return getToken(FM4ConfParser.RP, 0); }
		public RequiresContext(ConstraintruleContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof FM4ConfListener ) ((FM4ConfListener)listener).enterRequires(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof FM4ConfListener ) ((FM4ConfListener)listener).exitRequires(this);
		}
	}

	public final ConstraintruleContext constraintrule() throws RecognitionException {
		ConstraintruleContext _localctx = new ConstraintruleContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_constraintrule);
		try {
			setState(119);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REQUIRES:
				_localctx = new RequiresContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(105);
				match(REQUIRES);
				setState(106);
				match(LP);
				setState(107);
				identifier();
				setState(108);
				match(CM);
				setState(109);
				identifier();
				setState(110);
				match(RP);
				}
				break;
			case EXCLUDES:
				_localctx = new ExcludesContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(112);
				match(EXCLUDES);
				setState(113);
				match(LP);
				setState(114);
				identifier();
				setState(115);
				match(CM);
				setState(116);
				identifier();
				setState(117);
				match(RP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\25|\4\2\t\2\4\3\t"+
		"\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\3\2\3\2\3\2"+
		"\5\2\30\n\2\3\2\5\2\33\n\2\3\2\5\2\36\n\2\3\3\3\3\3\4\3\4\3\4\3\4\3\5"+
		"\3\5\3\5\3\5\3\5\7\5+\n\5\f\5\16\5.\13\5\3\6\3\6\3\6\3\6\3\6\7\6\65\n"+
		"\6\f\6\16\68\13\6\3\7\3\7\3\7\3\7\3\7\7\7?\n\7\f\7\16\7B\13\7\3\b\3\b"+
		"\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3"+
		"\t\3\t\6\tY\n\t\r\t\16\tZ\3\t\3\t\3\t\3\t\3\t\3\t\3\t\6\td\n\t\r\t\16"+
		"\te\3\t\3\t\5\tj\n\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3"+
		"\n\3\n\5\nz\n\n\3\n\2\2\13\2\4\6\b\n\f\16\20\22\2\2\2~\2\24\3\2\2\2\4"+
		"\37\3\2\2\2\6!\3\2\2\2\b%\3\2\2\2\n/\3\2\2\2\f9\3\2\2\2\16C\3\2\2\2\20"+
		"i\3\2\2\2\22y\3\2\2\2\24\25\5\4\3\2\25\27\5\6\4\2\26\30\5\b\5\2\27\26"+
		"\3\2\2\2\27\30\3\2\2\2\30\32\3\2\2\2\31\33\5\n\6\2\32\31\3\2\2\2\32\33"+
		"\3\2\2\2\33\35\3\2\2\2\34\36\5\f\7\2\35\34\3\2\2\2\35\36\3\2\2\2\36\3"+
		"\3\2\2\2\37 \7\3\2\2 \5\3\2\2\2!\"\7\4\2\2\"#\7\20\2\2#$\5\16\b\2$\7\3"+
		"\2\2\2%&\7\5\2\2&\'\7\20\2\2\',\5\16\b\2()\7\16\2\2)+\5\16\b\2*(\3\2\2"+
		"\2+.\3\2\2\2,*\3\2\2\2,-\3\2\2\2-\t\3\2\2\2.,\3\2\2\2/\60\7\6\2\2\60\61"+
		"\7\20\2\2\61\66\5\20\t\2\62\63\7\16\2\2\63\65\5\20\t\2\64\62\3\2\2\2\65"+
		"8\3\2\2\2\66\64\3\2\2\2\66\67\3\2\2\2\67\13\3\2\2\28\66\3\2\2\29:\7\7"+
		"\2\2:;\7\20\2\2;@\5\22\n\2<=\7\16\2\2=?\5\22\n\2><\3\2\2\2?B\3\2\2\2@"+
		">\3\2\2\2@A\3\2\2\2A\r\3\2\2\2B@\3\2\2\2CD\7\23\2\2D\17\3\2\2\2EF\7\b"+
		"\2\2FG\7\21\2\2GH\5\16\b\2HI\7\16\2\2IJ\5\16\b\2JK\7\22\2\2Kj\3\2\2\2"+
		"LM\7\t\2\2MN\7\21\2\2NO\5\16\b\2OP\7\16\2\2PQ\5\16\b\2QR\7\22\2\2Rj\3"+
		"\2\2\2ST\7\n\2\2TU\7\21\2\2UX\5\16\b\2VW\7\16\2\2WY\5\16\b\2XV\3\2\2\2"+
		"YZ\3\2\2\2ZX\3\2\2\2Z[\3\2\2\2[\\\3\2\2\2\\]\7\22\2\2]j\3\2\2\2^_\7\13"+
		"\2\2_`\7\21\2\2`c\5\16\b\2ab\7\16\2\2bd\5\16\b\2ca\3\2\2\2de\3\2\2\2e"+
		"c\3\2\2\2ef\3\2\2\2fg\3\2\2\2gh\7\22\2\2hj\3\2\2\2iE\3\2\2\2iL\3\2\2\2"+
		"iS\3\2\2\2i^\3\2\2\2j\21\3\2\2\2kl\7\f\2\2lm\7\21\2\2mn\5\16\b\2no\7\16"+
		"\2\2op\5\16\b\2pq\7\22\2\2qz\3\2\2\2rs\7\r\2\2st\7\21\2\2tu\5\16\b\2u"+
		"v\7\16\2\2vw\5\16\b\2wx\7\22\2\2xz\3\2\2\2yk\3\2\2\2yr\3\2\2\2z\23\3\2"+
		"\2\2\f\27\32\35,\66@Zeiy";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}